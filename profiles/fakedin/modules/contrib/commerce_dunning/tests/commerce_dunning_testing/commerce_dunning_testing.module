<?php

/**
 * @file
 * Provides tools and a payment method for manual testing.
 */

/**
 * Implements hook_menu().
 */
function commerce_dunning_testing_menu() {
  $items = array();
  $items['admin/config/development/dunning-testing'] = array(
    'title' => 'Commerce Dunning Testing',
    'description' => 'Manual testing of the functionality of Commerce Dunning.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_dunning_testing_testing_form'),
    'access arguments' => array('use manual testing tools'),
  );
  $items['admin/config/development/dunning/evaluate-task/%'] = array(
    'title' => 'Evaluate scheduled task',
    'page callback' => 'commerce_dunning_testing_evaluate_scheduled_task_page',
    'page arguments' => array(5),
    'access arguments' => array('use manual testing tools'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_dunning_testing_permission() {
  return array(
    'use manual testing tools' => array(
      'title' => t('Use manual testing tools'),
    ),
  );
}

/**
 * Form builder; manually testing Commerce Dunning's functionality.
 */
function commerce_dunning_testing_testing_form($form, &$form_state) {
  $form = array();
  $form['fieldset_scheduled_tasks'] = array(
    '#type' => 'fieldset',
    '#title' => t('Scheduled tasks'),
  );
  $task_rows = array();
  foreach (commerce_dunning_get_scheduled_tasks() as $tid => $task) {
    $task_rows[] = array(
      $task['identifier'],
      $task['config'],
      format_date($task['date'], 'short'),
      l(t('Evaluate now'), 'admin/config/development/dunning/evaluate-task/' . $tid),
    );
  }
  if ($task_rows) {
    $form['fieldset_scheduled_tasks']['scheduled_tasks'] = array(
      '#theme' => 'table',
      '#header' => array(
        t('Identifier'),
        t('Component name'),
        t('Scheduled date'),
        t('Operations')),
      '#rows' => $task_rows,
    );
  }
  else {
    $form['fieldset_scheduled_tasks']['no_scheduled_tasks'] = array(
      '#markup' => t('There are no scheduled tasks.'),
    );
  }
  $form['fieldset_influence_transactions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Influence transactions'),
  );
  $cards = commerce_dunning_testing_load_cards_with_other_payment_methods();
  if (!empty($cards)) {
    $options = array();
    foreach ($cards as $card) {
      $card_user = user_load($card->uid);
      $options[$card->card_id] = t('@username â€” !card_type ending in !number, expires !month/!year', array(
        '@username' => $card_user->name,
        '!card_type' => $card->card_type,
        '!number' => $card->card_number,
        '!month' => $card->card_exp_month,
        '!year' => $card->card_exp_year,
      ));
    }
    asort($options);
    $form['fieldset_influence_transactions']['commerce_dunning_testing_associate_card'] = array(
      '#type' => 'select',
      '#title' => t('Associate card'),
      '#description' => t('Select a card to associate with Commerce Dunning Testing Payment. Warning! The card will not be usable anymore with the payment gateway with which it was originally authorized.'),
      '#options' => $options,
      '#empty_option' => t('- None -'),
    );
    $form['#submit'][] = 'commerce_dunning_testing_form_submit_associate_card';
  }
  $form['fieldset_influence_transactions']['commerce_dunning_testing_next_transaction_status'] = array(
    '#type' => 'select',
    '#title' => t('Status of next transaction'),
    '#description' => t('Select the desired status of the next payment transaction performed with Commerce Dunning Testing Payment.'),
    '#options' => commerce_payment_transaction_status_options_list(),
    '#default_value' => variable_get('commerce_dunning_testing_next_transaction_status', COMMERCE_PAYMENT_STATUS_SUCCESS),
    '#required' => TRUE,
  );
  $form = system_settings_form($form);
  $form['fieldset_influence_transactions']['actions'] = $form['actions'];
  unset($form['actions']);
  return $form;
}

/**
 * Submit handler; testing form, associate a card with Dunning Testing Payment.
 */
function commerce_dunning_testing_form_submit_associate_card($form, &$form_state) {
  if (!empty($form_state['values']['commerce_dunning_testing_associate_card'])) {
    $card = commerce_cardonfile_load($form_state['values']['commerce_dunning_testing_associate_card']);
    $card->payment_method = 'commerce_cardonfile_testing_payment';
    $card->instance_id = 'commerce_cardonfile_testing_payment|commerce_payment_commerce_cardonfile_testing_payment';
    $card->status = 1;
    $card->instance_default = 1;
    commerce_cardonfile_save($card);
  }
}

/**
 * Page callback: evaluates scheduled task then redirects to the testing page.
 */
function commerce_dunning_testing_evaluate_scheduled_task_page($tid) {
  $task = rules_scheduler_task_load($tid);
  commerce_dunning_testing_evaluate_scheduled_task($task);
  drupal_set_message(t('Task %task has been evaluated.', array('%task' => $task['identifier'])));
  drupal_goto('admin/config/development/dunning-testing');
}

/**
 * Loads a Rules scheduler task by its identifier.
 */
function commerce_dunning_testing_task_load_by_identifier($identifier) {
  $result = db_select('rules_scheduler', 'r')
    ->fields('r')
    ->condition('identifier', $identifier)
    ->execute();
  return $result->fetchAssoc();
}

/**
 * Evaluates and delete a scheduled task.
 */
function commerce_dunning_testing_evaluate_scheduled_task($task) {
  if (!is_array($task)) {
    $task = rules_scheduler_task_load($task);
  }
  rules_scheduler_run_task($task);
  db_delete('rules_scheduler')
    ->condition('tid', $task['tid'])
    ->execute();
}

/**
 * Loads cards associated to other payment methods than Dunning Testing.
 */
function commerce_dunning_testing_load_cards_with_other_payment_methods() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_cardonfile')
    ->propertyCondition('payment_method', 'commerce_cardonfile_testing_payment', '<>');
  $result = $query->execute();

  if (isset($result['commerce_cardonfile'])) {
    return commerce_cardonfile_load_multiple(array_keys($result['commerce_cardonfile']));
  }
  return NULL;
}
